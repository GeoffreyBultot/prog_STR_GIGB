
SendToRPi-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002154  08002154  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002154  08002154  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002154  08002154  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800215c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002168  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002168  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005335  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001172  00000000  00000000  00025369  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  000264e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  00026ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014bcd  00000000  00000000  00027038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000590b  00000000  00000000  0003bc05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074029  00000000  00000000  00041510  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001404  00000000  00000000  000b55b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002104 	.word	0x08002104

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002104 	.word	0x08002104

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fab7 	bl	8000798 <HAL_Init>

  /* USER CODE BEGIN Init */
  for(int i=0; i<NB_BYTES_TO_SEND; i++){
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	e007      	b.n	8000240 <main+0x20>
	  bToSend[i] = 't';
 8000230:	4a08      	ldr	r2, [pc, #32]	; (8000254 <main+0x34>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	18d3      	adds	r3, r2, r3
 8000236:	2274      	movs	r2, #116	; 0x74
 8000238:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<NB_BYTES_TO_SEND; i++){
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3301      	adds	r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b01      	cmp	r3, #1
 8000244:	ddf4      	ble.n	8000230 <main+0x10>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f807 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f889 	bl	8000360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800024e:	f000 f857 	bl	8000300 <MX_USART2_UART_Init>
  //HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000252:	e7fe      	b.n	8000252 <main+0x32>
 8000254:	200000b0 	.word	0x200000b0

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b099      	sub	sp, #100	; 0x64
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	242c      	movs	r4, #44	; 0x2c
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2334      	movs	r3, #52	; 0x34
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f001 ff43 	bl	80020f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	231c      	movs	r3, #28
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	0018      	movs	r0, r3
 8000274:	2310      	movs	r3, #16
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f001 ff3b 	bl	80020f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	231c      	movs	r3, #28
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f001 ff34 	bl	80020f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2220      	movs	r2, #32
 8000290:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000292:	193b      	adds	r3, r7, r4
 8000294:	2201      	movs	r2, #1
 8000296:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2200      	movs	r2, #0
 800029c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fd6d 	bl	8000d80 <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002aa:	f000 f9ab 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	211c      	movs	r1, #28
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2207      	movs	r2, #7
 80002b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2203      	movs	r2, #3
 80002ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2101      	movs	r1, #1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f8dd 	bl	800148c <HAL_RCC_ClockConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d6:	f000 f995 	bl	8000604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002da:	003b      	movs	r3, r7
 80002dc:	2202      	movs	r2, #2
 80002de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e6:	003b      	movs	r3, r7
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fa47 	bl	800177c <HAL_RCCEx_PeriphCLKConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002f2:	f000 f987 	bl	8000604 <Error_Handler>
  }
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b019      	add	sp, #100	; 0x64
 80002fc:	bd90      	pop	{r4, r7, pc}
	...

08000300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000306:	4a15      	ldr	r2, [pc, #84]	; (800035c <MX_USART2_UART_Init+0x5c>)
 8000308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800030c:	2296      	movs	r2, #150	; 0x96
 800030e:	0212      	lsls	r2, r2, #8
 8000310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <MX_USART2_UART_Init+0x58>)
 8000344:	0018      	movs	r0, r3
 8000346:	f001 fb19 	bl	800197c <HAL_UART_Init>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800034e:	f000 f959 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000030 	.word	0x20000030
 800035c:	40004400 	.word	0x40004400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	240c      	movs	r4, #12
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2314      	movs	r3, #20
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f001 febf 	bl	80020f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b48      	ldr	r3, [pc, #288]	; (8000498 <MX_GPIO_Init+0x138>)
 8000378:	695a      	ldr	r2, [r3, #20]
 800037a:	4b47      	ldr	r3, [pc, #284]	; (8000498 <MX_GPIO_Init+0x138>)
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	0309      	lsls	r1, r1, #12
 8000380:	430a      	orrs	r2, r1
 8000382:	615a      	str	r2, [r3, #20]
 8000384:	4b44      	ldr	r3, [pc, #272]	; (8000498 <MX_GPIO_Init+0x138>)
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	031b      	lsls	r3, r3, #12
 800038c:	4013      	ands	r3, r2
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000392:	4b41      	ldr	r3, [pc, #260]	; (8000498 <MX_GPIO_Init+0x138>)
 8000394:	695a      	ldr	r2, [r3, #20]
 8000396:	4b40      	ldr	r3, [pc, #256]	; (8000498 <MX_GPIO_Init+0x138>)
 8000398:	2180      	movs	r1, #128	; 0x80
 800039a:	03c9      	lsls	r1, r1, #15
 800039c:	430a      	orrs	r2, r1
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <MX_GPIO_Init+0x138>)
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	03db      	lsls	r3, r3, #15
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b3a      	ldr	r3, [pc, #232]	; (8000498 <MX_GPIO_Init+0x138>)
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	4b39      	ldr	r3, [pc, #228]	; (8000498 <MX_GPIO_Init+0x138>)
 80003b4:	2180      	movs	r1, #128	; 0x80
 80003b6:	0289      	lsls	r1, r1, #10
 80003b8:	430a      	orrs	r2, r1
 80003ba:	615a      	str	r2, [r3, #20]
 80003bc:	4b36      	ldr	r3, [pc, #216]	; (8000498 <MX_GPIO_Init+0x138>)
 80003be:	695a      	ldr	r2, [r3, #20]
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	029b      	lsls	r3, r3, #10
 80003c4:	4013      	ands	r3, r2
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_INT_GPIO_Port, DEBUG_INT_Pin, GPIO_PIN_RESET);
 80003ca:	4b34      	ldr	r3, [pc, #208]	; (800049c <MX_GPIO_Init+0x13c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fc9b 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d6:	2390      	movs	r3, #144	; 0x90
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	2200      	movs	r2, #0
 80003dc:	2120      	movs	r1, #32
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 fc94 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_SET);
 80003e4:	4b2d      	ldr	r3, [pc, #180]	; (800049c <MX_GPIO_Init+0x13c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fc8e 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin RX_Pin */
  GPIO_InitStruct.Pin = B1_Pin|RX_Pin;
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	2284      	movs	r2, #132	; 0x84
 80003f4:	0192      	lsls	r2, r2, #6
 80003f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	4a29      	ldr	r2, [pc, #164]	; (80004a0 <MX_GPIO_Init+0x140>)
 80003fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000404:	193b      	adds	r3, r7, r4
 8000406:	4a25      	ldr	r2, [pc, #148]	; (800049c <MX_GPIO_Init+0x13c>)
 8000408:	0019      	movs	r1, r3
 800040a:	0010      	movs	r0, r2
 800040c:	f000 fb06 	bl	8000a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_INT_Pin */
  GPIO_InitStruct.Pin = DEBUG_INT_Pin;
 8000410:	193b      	adds	r3, r7, r4
 8000412:	2208      	movs	r2, #8
 8000414:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	193b      	adds	r3, r7, r4
 8000418:	2201      	movs	r2, #1
 800041a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	2203      	movs	r2, #3
 8000426:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_INT_GPIO_Port, &GPIO_InitStruct);
 8000428:	193b      	adds	r3, r7, r4
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <MX_GPIO_Init+0x13c>)
 800042c:	0019      	movs	r1, r3
 800042e:	0010      	movs	r0, r2
 8000430:	f000 faf4 	bl	8000a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	2220      	movs	r2, #32
 8000438:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2201      	movs	r2, #1
 800043e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800044c:	193a      	adds	r2, r7, r4
 800044e:	2390      	movs	r3, #144	; 0x90
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fae1 	bl	8000a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_Pin */
  GPIO_InitStruct.Pin = TX_Pin;
 800045a:	0021      	movs	r1, r4
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2201      	movs	r2, #1
 8000466:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000474:	187b      	adds	r3, r7, r1
 8000476:	4a09      	ldr	r2, [pc, #36]	; (800049c <MX_GPIO_Init+0x13c>)
 8000478:	0019      	movs	r1, r3
 800047a:	0010      	movs	r0, r2
 800047c:	f000 face 	bl	8000a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000480:	2200      	movs	r2, #0
 8000482:	2100      	movs	r1, #0
 8000484:	2007      	movs	r0, #7
 8000486:	f000 fa97 	bl	80009b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800048a:	2007      	movs	r0, #7
 800048c:	f000 faa9 	bl	80009e2 <HAL_NVIC_EnableIRQ>

}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b009      	add	sp, #36	; 0x24
 8000496:	bd90      	pop	{r4, r7, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	48000800 	.word	0x48000800
 80004a0:	10210000 	.word	0x10210000

080004a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b08d      	sub	sp, #52	; 0x34
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	0002      	movs	r2, r0
 80004ac:	1dbb      	adds	r3, r7, #6
 80004ae:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_INT_GPIO_Port, DEBUG_INT_Pin, GPIO_PIN_SET);
 80004b0:	4b4d      	ldr	r3, [pc, #308]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x144>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	2108      	movs	r1, #8
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fc28 	bl	8000d0c <HAL_GPIO_WritePin>
	if(!is_sending){ 	// en falling edge, premier
 80004bc:	4b4b      	ldr	r3, [pc, #300]	; (80005ec <HAL_GPIO_EXTI_Callback+0x148>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4053      	eors	r3, r2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d030      	beq.n	800052c <HAL_GPIO_EXTI_Callback+0x88>
		// init pin on reset
		HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 80004ca:	4b47      	ldr	r3, [pc, #284]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x144>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fc1b 	bl	8000d0c <HAL_GPIO_WritePin>

		// set pin on rising edge
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	211c      	movs	r1, #28
 80004d8:	000c      	movs	r4, r1
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	0018      	movs	r0, r3
 80004de:	2314      	movs	r3, #20
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f001 fe06 	bl	80020f4 <memset>
		GPIO_InitStruct.Pin = RX_Pin;
 80004e8:	0021      	movs	r1, r4
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	0052      	lsls	r2, r2, #1
 80004f0:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	4a3d      	ldr	r2, [pc, #244]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80004fc:	605a      	str	r2, [r3, #4]
		HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	4a39      	ldr	r2, [pc, #228]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x144>)
 8000502:	0019      	movs	r1, r3
 8000504:	0010      	movs	r0, r2
 8000506:	f000 fa89 	bl	8000a1c <HAL_GPIO_Init>

		// Debug LED
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800050a:	2390      	movs	r3, #144	; 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2201      	movs	r2, #1
 8000510:	2120      	movs	r1, #32
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fbfa 	bl	8000d0c <HAL_GPIO_WritePin>

		// Compteurs à 0
		tx_bit_sending = 0;
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x150>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
		tx_byte_sending = 0;
 800051e:	4b36      	ldr	r3, [pc, #216]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x154>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]

		is_sending = 1;
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <HAL_GPIO_EXTI_Callback+0x148>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	e052      	b.n	80005d2 <HAL_GPIO_EXTI_Callback+0x12e>
	}
	else{
		if(tx_byte_sending == NB_BYTES_TO_SEND)
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x154>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d12a      	bne.n	800058a <HAL_GPIO_EXTI_Callback+0xe6>
		{
			// init pin on reset
			HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_SET);
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x144>)
 8000536:	2201      	movs	r2, #1
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fbe6 	bl	8000d0c <HAL_GPIO_WritePin>

			// set pin on rising edge
			GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	2108      	movs	r1, #8
 8000542:	000c      	movs	r4, r1
 8000544:	187b      	adds	r3, r7, r1
 8000546:	0018      	movs	r0, r3
 8000548:	2314      	movs	r3, #20
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f001 fdd1 	bl	80020f4 <memset>
			GPIO_InitStruct.Pin = RX_Pin;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	0052      	lsls	r2, r2, #1
 800055a:	601a      	str	r2, [r3, #0]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	4a25      	ldr	r2, [pc, #148]	; (80005fc <HAL_GPIO_EXTI_Callback+0x158>)
 8000566:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000568:	187b      	adds	r3, r7, r1
 800056a:	4a1f      	ldr	r2, [pc, #124]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x144>)
 800056c:	0019      	movs	r1, r3
 800056e:	0010      	movs	r0, r2
 8000570:	f000 fa54 	bl	8000a1c <HAL_GPIO_Init>

			// Debug LED
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2200      	movs	r2, #0
 800057a:	2120      	movs	r1, #32
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fbc5 	bl	8000d0c <HAL_GPIO_WritePin>

			is_sending = 0;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <HAL_GPIO_EXTI_Callback+0x148>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e023      	b.n	80005d2 <HAL_GPIO_EXTI_Callback+0x12e>
		}
		else{
			HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, (bToSend[tx_byte_sending] & (1<<tx_bit_sending)));
 800058a:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x154>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000590:	5cd3      	ldrb	r3, [r2, r3]
 8000592:	b25a      	sxtb	r2, r3
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x150>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2101      	movs	r1, #1
 800059a:	4099      	lsls	r1, r3
 800059c:	000b      	movs	r3, r1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	4013      	ands	r3, r2
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x144>)
 80005a8:	001a      	movs	r2, r3
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	f000 fbae 	bl	8000d0c <HAL_GPIO_WritePin>
			tx_bit_sending++;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x150>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x150>)
 80005b8:	601a      	str	r2, [r3, #0]
			if(tx_bit_sending == 8){
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x150>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b08      	cmp	r3, #8
 80005c0:	d107      	bne.n	80005d2 <HAL_GPIO_EXTI_Callback+0x12e>
				tx_bit_sending = 0;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x150>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
				tx_byte_sending++;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x154>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x154>)
 80005d0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	HAL_GPIO_WritePin(DEBUG_INT_GPIO_Port, DEBUG_INT_Pin, GPIO_PIN_RESET);
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x144>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	2108      	movs	r1, #8
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fb97 	bl	8000d0c <HAL_GPIO_WritePin>
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b00d      	add	sp, #52	; 0x34
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	48000800 	.word	0x48000800
 80005ec:	20000028 	.word	0x20000028
 80005f0:	10110000 	.word	0x10110000
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	200000b4 	.word	0x200000b4
 80005fc:	10210000 	.word	0x10210000
 8000600:	200000b0 	.word	0x200000b0

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060a:	e7fe      	b.n	800060a <Error_Handler+0x6>

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x44>)
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_MspInit+0x44>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	619a      	str	r2, [r3, #24]
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x44>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_MspInit+0x44>)
 800062c:	69da      	ldr	r2, [r3, #28]
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_MspInit+0x44>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0549      	lsls	r1, r1, #21
 8000634:	430a      	orrs	r2, r1
 8000636:	61da      	str	r2, [r3, #28]
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_MspInit+0x44>)
 800063a:	69da      	ldr	r2, [r3, #28]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	055b      	lsls	r3, r3, #21
 8000640:	4013      	ands	r3, r2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2314      	movs	r3, #20
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	0018      	movs	r0, r3
 8000662:	2314      	movs	r3, #20
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f001 fd44 	bl	80020f4 <memset>
  if(huart->Instance==USART2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <HAL_UART_MspInit+0x90>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d132      	bne.n	80006dc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000678:	69da      	ldr	r2, [r3, #28]
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_UART_MspInit+0x94>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0289      	lsls	r1, r1, #10
 8000680:	430a      	orrs	r2, r1
 8000682:	61da      	str	r2, [r3, #28]
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	029b      	lsls	r3, r3, #10
 800068c:	4013      	ands	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0x94>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_MspInit+0x94>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ae:	2114      	movs	r1, #20
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	220c      	movs	r2, #12
 80006b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2201      	movs	r2, #1
 80006cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	2390      	movs	r3, #144	; 0x90
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f9a0 	bl	8000a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b00a      	add	sp, #40	; 0x28
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40004400 	.word	0x40004400
 80006e8:	40021000 	.word	0x40021000

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <NMI_Handler+0x4>

080006f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler+0x4>

080006f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f88a 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fb10 	bl	8000d48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	019b      	lsls	r3, r3, #6
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fb0b 	bl	8000d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000746:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0b      	ldr	r4, [pc, #44]	; (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800076e:	f7ff ffe3 	bl	8000738 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000772:	f001 fc9b 	bl	80020ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fd53 	bl	8000220 <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   r0, =_estack
 800077c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000788:	0800215c 	.word	0x0800215c
  ldr r2, =_sbss
 800078c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000790:	200000bc 	.word	0x200000bc

08000794 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_COMP_IRQHandler>
	...

08000798 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <HAL_Init+0x24>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_Init+0x24>)
 80007a2:	2110      	movs	r1, #16
 80007a4:	430a      	orrs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 f809 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ae:	f7ff ff2d 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_InitTick+0x5c>)
 80007ca:	681c      	ldr	r4, [r3, #0]
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_InitTick+0x60>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	0019      	movs	r1, r3
 80007d2:	23fa      	movs	r3, #250	; 0xfa
 80007d4:	0098      	lsls	r0, r3, #2
 80007d6:	f7ff fc97 	bl	8000108 <__udivsi3>
 80007da:	0003      	movs	r3, r0
 80007dc:	0019      	movs	r1, r3
 80007de:	0020      	movs	r0, r4
 80007e0:	f7ff fc92 	bl	8000108 <__udivsi3>
 80007e4:	0003      	movs	r3, r0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 f90b 	bl	8000a02 <HAL_SYSTICK_Config>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e00f      	b.n	8000814 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d80b      	bhi.n	8000812 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	425b      	negs	r3, r3
 8000800:	2200      	movs	r2, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f8d8 	bl	80009b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_InitTick+0x64>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b003      	add	sp, #12
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	001a      	movs	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	18d2      	adds	r2, r2, r3
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000008 	.word	0x20000008
 8000848:	200000b8 	.word	0x200000b8

0800084c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	200000b8 	.word	0x200000b8

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	0002      	movs	r2, r0
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b7f      	cmp	r3, #127	; 0x7f
 8000872:	d809      	bhi.n	8000888 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	231f      	movs	r3, #31
 800087c:	401a      	ands	r2, r3
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_EnableIRQ+0x30>)
 8000880:	2101      	movs	r1, #1
 8000882:	4091      	lsls	r1, r2
 8000884:	000a      	movs	r2, r1
 8000886:	601a      	str	r2, [r3, #0]
  }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}
 8000890:	e000e100 	.word	0xe000e100

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b7f      	cmp	r3, #127	; 0x7f
 80008a8:	d828      	bhi.n	80008fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008aa:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <__NVIC_SetPriority+0xd4>)
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	33c0      	adds	r3, #192	; 0xc0
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	589b      	ldr	r3, [r3, r2]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	2203      	movs	r2, #3
 80008c2:	400a      	ands	r2, r1
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	21ff      	movs	r1, #255	; 0xff
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	22ff      	movs	r2, #255	; 0xff
 80008d8:	401a      	ands	r2, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	2303      	movs	r3, #3
 80008e2:	4003      	ands	r3, r0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <__NVIC_SetPriority+0xd4>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	430a      	orrs	r2, r1
 80008f4:	33c0      	adds	r3, #192	; 0xc0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008fa:	e031      	b.n	8000960 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <__NVIC_SetPriority+0xd8>)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0019      	movs	r1, r3
 8000904:	230f      	movs	r3, #15
 8000906:	400b      	ands	r3, r1
 8000908:	3b08      	subs	r3, #8
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	3306      	adds	r3, #6
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	18d3      	adds	r3, r2, r3
 8000912:	3304      	adds	r3, #4
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	0011      	movs	r1, r2
 800091c:	2203      	movs	r2, #3
 800091e:	400a      	ands	r2, r1
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	21ff      	movs	r1, #255	; 0xff
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	401a      	ands	r2, r3
 800092c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	401a      	ands	r2, r3
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0018      	movs	r0, r3
 800093c:	2303      	movs	r3, #3
 800093e:	4003      	ands	r3, r0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <__NVIC_SetPriority+0xd8>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	001c      	movs	r4, r3
 800094c:	230f      	movs	r3, #15
 800094e:	4023      	ands	r3, r4
 8000950:	3b08      	subs	r3, #8
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	430a      	orrs	r2, r1
 8000956:	3306      	adds	r3, #6
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	18c3      	adds	r3, r0, r3
 800095c:	3304      	adds	r3, #4
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b003      	add	sp, #12
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <SysTick_Config+0x40>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d901      	bls.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e010      	b.n	80009a8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <SysTick_Config+0x44>)
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	3a01      	subs	r2, #1
 800098c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	2301      	movs	r3, #1
 8000990:	425b      	negs	r3, r3
 8000992:	2103      	movs	r1, #3
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff ff7d 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SysTick_Config+0x44>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x44>)
 80009a2:	2207      	movs	r2, #7
 80009a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	00ffffff 	.word	0x00ffffff
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	210f      	movs	r1, #15
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	1c02      	adds	r2, r0, #0
 80009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff ff5d 	bl	8000894 <__NVIC_SetPriority>
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	0002      	movs	r2, r0
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ff33 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ffaf 	bl	8000970 <SysTick_Config>
 8000a12:	0003      	movs	r3, r0
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e155      	b.n	8000cd8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d100      	bne.n	8000a44 <HAL_GPIO_Init+0x28>
 8000a42:	e146      	b.n	8000cd2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d00b      	beq.n	8000a64 <HAL_GPIO_Init+0x48>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b12      	cmp	r3, #18
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	409a      	lsls	r2, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	43da      	mvns	r2, r3
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	409a      	lsls	r2, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0xea>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d123      	bne.n	8000b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	08da      	lsrs	r2, r3, #3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3208      	adds	r2, #8
 8000b0e:	0092      	lsls	r2, r2, #2
 8000b10:	58d3      	ldr	r3, [r2, r3]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	2207      	movs	r2, #7
 8000b18:	4013      	ands	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2107      	movs	r1, #7
 8000b32:	400b      	ands	r3, r1
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	08da      	lsrs	r2, r3, #3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3208      	adds	r2, #8
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	6939      	ldr	r1, [r7, #16]
 8000b4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	055b      	lsls	r3, r3, #21
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_Init+0x174>
 8000b8e:	e0a0      	b.n	8000cd2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b90:	4b57      	ldr	r3, [pc, #348]	; (8000cf0 <HAL_GPIO_Init+0x2d4>)
 8000b92:	699a      	ldr	r2, [r3, #24]
 8000b94:	4b56      	ldr	r3, [pc, #344]	; (8000cf0 <HAL_GPIO_Init+0x2d4>)
 8000b96:	2101      	movs	r1, #1
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	619a      	str	r2, [r3, #24]
 8000b9c:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <HAL_GPIO_Init+0x2d4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba8:	4a52      	ldr	r2, [pc, #328]	; (8000cf4 <HAL_GPIO_Init+0x2d8>)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	589b      	ldr	r3, [r3, r2]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2203      	movs	r2, #3
 8000bba:	4013      	ands	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	43da      	mvns	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	2390      	movs	r3, #144	; 0x90
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d019      	beq.n	8000c0a <HAL_GPIO_Init+0x1ee>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a47      	ldr	r2, [pc, #284]	; (8000cf8 <HAL_GPIO_Init+0x2dc>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0x1ea>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a46      	ldr	r2, [pc, #280]	; (8000cfc <HAL_GPIO_Init+0x2e0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d00d      	beq.n	8000c02 <HAL_GPIO_Init+0x1e6>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a45      	ldr	r2, [pc, #276]	; (8000d00 <HAL_GPIO_Init+0x2e4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d007      	beq.n	8000bfe <HAL_GPIO_Init+0x1e2>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a44      	ldr	r2, [pc, #272]	; (8000d04 <HAL_GPIO_Init+0x2e8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_GPIO_Init+0x1de>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	e008      	b.n	8000c0c <HAL_GPIO_Init+0x1f0>
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x1f0>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e004      	b.n	8000c0c <HAL_GPIO_Init+0x1f0>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_Init+0x1f0>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <HAL_GPIO_Init+0x1f0>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	2103      	movs	r1, #3
 8000c10:	400a      	ands	r2, r1
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	4093      	lsls	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c1c:	4935      	ldr	r1, [pc, #212]	; (8000cf4 <HAL_GPIO_Init+0x2d8>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	025b      	lsls	r3, r3, #9
 8000c42:	4013      	ands	r3, r2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c54:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	035b      	lsls	r3, r3, #13
 8000c96:	4013      	ands	r3, r2
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	039b      	lsls	r3, r3, #14
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_GPIO_Init+0x2ec>)
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	40da      	lsrs	r2, r3
 8000ce0:	1e13      	subs	r3, r2, #0
 8000ce2:	d000      	beq.n	8000ce6 <HAL_GPIO_Init+0x2ca>
 8000ce4:	e6a2      	b.n	8000a2c <HAL_GPIO_Init+0x10>
  } 
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b006      	add	sp, #24
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000c00 	.word	0x48000c00
 8000d04:	48001000 	.word	0x48001000
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	0008      	movs	r0, r1
 8000d16:	0011      	movs	r1, r2
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	1c02      	adds	r2, r0, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
 8000d1e:	1c7b      	adds	r3, r7, #1
 8000d20:	1c0a      	adds	r2, r1, #0
 8000d22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d24:	1c7b      	adds	r3, r7, #1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d004      	beq.n	8000d36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	881a      	ldrh	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d34:	e003      	b.n	8000d3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d36:	1cbb      	adds	r3, r7, #2
 8000d38:	881a      	ldrh	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	0002      	movs	r2, r0
 8000d50:	1dbb      	adds	r3, r7, #6
 8000d52:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	1dba      	adds	r2, r7, #6
 8000d5a:	8812      	ldrh	r2, [r2, #0]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d008      	beq.n	8000d72 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d62:	1dba      	adds	r2, r7, #6
 8000d64:	8812      	ldrh	r2, [r2, #0]
 8000d66:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d68:	1dbb      	adds	r3, r7, #6
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fb99 	bl	80004a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f000 fb76 	bl	8001480 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <HAL_RCC_OscConfig+0x20>
 8000d9e:	e08e      	b.n	8000ebe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da0:	4bc5      	ldr	r3, [pc, #788]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	220c      	movs	r2, #12
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d00e      	beq.n	8000dca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dac:	4bc2      	ldr	r3, [pc, #776]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	220c      	movs	r2, #12
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d117      	bne.n	8000de8 <HAL_RCC_OscConfig+0x68>
 8000db8:	4bbf      	ldr	r3, [pc, #764]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	23c0      	movs	r3, #192	; 0xc0
 8000dbe:	025b      	lsls	r3, r3, #9
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d10e      	bne.n	8000de8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dca:	4bbb      	ldr	r3, [pc, #748]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	029b      	lsls	r3, r3, #10
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d100      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x58>
 8000dd6:	e071      	b.n	8000ebc <HAL_RCC_OscConfig+0x13c>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d000      	beq.n	8000de2 <HAL_RCC_OscConfig+0x62>
 8000de0:	e06c      	b.n	8000ebc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f000 fb4c 	bl	8001480 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d107      	bne.n	8000e00 <HAL_RCC_OscConfig+0x80>
 8000df0:	4bb1      	ldr	r3, [pc, #708]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4bb0      	ldr	r3, [pc, #704]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	0249      	lsls	r1, r1, #9
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e02f      	b.n	8000e60 <HAL_RCC_OscConfig+0xe0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10c      	bne.n	8000e22 <HAL_RCC_OscConfig+0xa2>
 8000e08:	4bab      	ldr	r3, [pc, #684]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4baa      	ldr	r3, [pc, #680]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e0e:	49ab      	ldr	r1, [pc, #684]	; (80010bc <HAL_RCC_OscConfig+0x33c>)
 8000e10:	400a      	ands	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	4ba8      	ldr	r3, [pc, #672]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4ba7      	ldr	r3, [pc, #668]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e1a:	49a9      	ldr	r1, [pc, #676]	; (80010c0 <HAL_RCC_OscConfig+0x340>)
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e01e      	b.n	8000e60 <HAL_RCC_OscConfig+0xe0>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d10e      	bne.n	8000e48 <HAL_RCC_OscConfig+0xc8>
 8000e2a:	4ba3      	ldr	r3, [pc, #652]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4ba2      	ldr	r3, [pc, #648]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	02c9      	lsls	r1, r1, #11
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	4b9f      	ldr	r3, [pc, #636]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0xe0>
 8000e48:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b9a      	ldr	r3, [pc, #616]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	499b      	ldr	r1, [pc, #620]	; (80010bc <HAL_RCC_OscConfig+0x33c>)
 8000e50:	400a      	ands	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	4b98      	ldr	r3, [pc, #608]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b97      	ldr	r3, [pc, #604]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	4999      	ldr	r1, [pc, #612]	; (80010c0 <HAL_RCC_OscConfig+0x340>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d014      	beq.n	8000e92 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fcf0 	bl	800084c <HAL_GetTick>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e72:	f7ff fceb 	bl	800084c <HAL_GetTick>
 8000e76:	0002      	movs	r2, r0
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e2fd      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e84:	4b8c      	ldr	r3, [pc, #560]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0xf2>
 8000e90:	e015      	b.n	8000ebe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fcdb 	bl	800084c <HAL_GetTick>
 8000e96:	0003      	movs	r3, r0
 8000e98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fcd6 	bl	800084c <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e2e8      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	4b82      	ldr	r3, [pc, #520]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	029b      	lsls	r3, r3, #10
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x11c>
 8000eba:	e000      	b.n	8000ebe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d100      	bne.n	8000eca <HAL_RCC_OscConfig+0x14a>
 8000ec8:	e06c      	b.n	8000fa4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eca:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	220c      	movs	r2, #12
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d00e      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ed4:	4b78      	ldr	r3, [pc, #480]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	220c      	movs	r2, #12
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d11f      	bne.n	8000f20 <HAL_RCC_OscConfig+0x1a0>
 8000ee0:	4b75      	ldr	r3, [pc, #468]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	23c0      	movs	r3, #192	; 0xc0
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	401a      	ands	r2, r3
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d116      	bne.n	8000f20 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d005      	beq.n	8000f08 <HAL_RCC_OscConfig+0x188>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d001      	beq.n	8000f08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e2bb      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	22f8      	movs	r2, #248	; 0xf8
 8000f0e:	4393      	bics	r3, r2
 8000f10:	0019      	movs	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	00da      	lsls	r2, r3, #3
 8000f18:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1e:	e041      	b.n	8000fa4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d024      	beq.n	8000f72 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f28:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc8a 	bl	800084c <HAL_GetTick>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fc85 	bl	800084c <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e297      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f50:	4b59      	ldr	r3, [pc, #356]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2202      	movs	r2, #2
 8000f56:	4013      	ands	r3, r2
 8000f58:	d0f1      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	22f8      	movs	r2, #248	; 0xf8
 8000f60:	4393      	bics	r3, r2
 8000f62:	0019      	movs	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	00da      	lsls	r2, r3, #3
 8000f6a:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e018      	b.n	8000fa4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f72:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	438a      	bics	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc65 	bl	800084c <HAL_GetTick>
 8000f82:	0003      	movs	r3, r0
 8000f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f88:	f7ff fc60 	bl	800084c <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e272      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d1f1      	bne.n	8000f88 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4013      	ands	r3, r2
 8000fac:	d036      	beq.n	800101c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d019      	beq.n	8000fea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fc43 	bl	800084c <HAL_GetTick>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc3e 	bl	800084c <HAL_GetTick>
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e250      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d0f1      	beq.n	8000fcc <HAL_RCC_OscConfig+0x24c>
 8000fe8:	e018      	b.n	800101c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fc29 	bl	800084c <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc24 	bl	800084c <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e236      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	2202      	movs	r2, #2
 8001018:	4013      	ands	r3, r2
 800101a:	d1f1      	bne.n	8001000 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2204      	movs	r2, #4
 8001022:	4013      	ands	r3, r2
 8001024:	d100      	bne.n	8001028 <HAL_RCC_OscConfig+0x2a8>
 8001026:	e0b5      	b.n	8001194 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001028:	231f      	movs	r3, #31
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8001032:	69da      	ldr	r2, [r3, #28]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	055b      	lsls	r3, r3, #21
 8001038:	4013      	ands	r3, r2
 800103a:	d111      	bne.n	8001060 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 800103e:	69da      	ldr	r2, [r3, #28]
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	0549      	lsls	r1, r1, #21
 8001046:	430a      	orrs	r2, r1
 8001048:	61da      	str	r2, [r3, #28]
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 800104c:	69da      	ldr	r2, [r3, #28]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	055b      	lsls	r3, r3, #21
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001058:	231f      	movs	r3, #31
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_RCC_OscConfig+0x344>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4013      	ands	r3, r2
 800106a:	d11a      	bne.n	80010a2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_RCC_OscConfig+0x344>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_RCC_OscConfig+0x344>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0049      	lsls	r1, r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800107a:	f7ff fbe7 	bl	800084c <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001084:	f7ff fbe2 	bl	800084c <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1f4      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_OscConfig+0x344>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4013      	ands	r3, r2
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10e      	bne.n	80010c8 <HAL_RCC_OscConfig+0x348>
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 80010ac:	6a1a      	ldr	r2, [r3, #32]
 80010ae:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	621a      	str	r2, [r3, #32]
 80010b6:	e035      	b.n	8001124 <HAL_RCC_OscConfig+0x3a4>
 80010b8:	40021000 	.word	0x40021000
 80010bc:	fffeffff 	.word	0xfffeffff
 80010c0:	fffbffff 	.word	0xfffbffff
 80010c4:	40007000 	.word	0x40007000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x36a>
 80010d0:	4bca      	ldr	r3, [pc, #808]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	4bc9      	ldr	r3, [pc, #804]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	438a      	bics	r2, r1
 80010da:	621a      	str	r2, [r3, #32]
 80010dc:	4bc7      	ldr	r3, [pc, #796]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	4bc6      	ldr	r3, [pc, #792]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80010e2:	2104      	movs	r1, #4
 80010e4:	438a      	bics	r2, r1
 80010e6:	621a      	str	r2, [r3, #32]
 80010e8:	e01c      	b.n	8001124 <HAL_RCC_OscConfig+0x3a4>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x38c>
 80010f2:	4bc2      	ldr	r3, [pc, #776]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80010f4:	6a1a      	ldr	r2, [r3, #32]
 80010f6:	4bc1      	ldr	r3, [pc, #772]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80010f8:	2104      	movs	r1, #4
 80010fa:	430a      	orrs	r2, r1
 80010fc:	621a      	str	r2, [r3, #32]
 80010fe:	4bbf      	ldr	r3, [pc, #764]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001100:	6a1a      	ldr	r2, [r3, #32]
 8001102:	4bbe      	ldr	r3, [pc, #760]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001104:	2101      	movs	r1, #1
 8001106:	430a      	orrs	r2, r1
 8001108:	621a      	str	r2, [r3, #32]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0x3a4>
 800110c:	4bbb      	ldr	r3, [pc, #748]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	4bba      	ldr	r3, [pc, #744]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	621a      	str	r2, [r3, #32]
 8001118:	4bb8      	ldr	r3, [pc, #736]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	4bb7      	ldr	r3, [pc, #732]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800111e:	2104      	movs	r1, #4
 8001120:	438a      	bics	r2, r1
 8001122:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d014      	beq.n	8001156 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112c:	f7ff fb8e 	bl	800084c <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	e009      	b.n	800114a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fb89 	bl	800084c <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	4aaf      	ldr	r2, [pc, #700]	; (8001400 <HAL_RCC_OscConfig+0x680>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e19a      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114a:	4bac      	ldr	r3, [pc, #688]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x3b6>
 8001154:	e013      	b.n	800117e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fb79 	bl	800084c <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115e:	e009      	b.n	8001174 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001160:	f7ff fb74 	bl	800084c <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	4aa5      	ldr	r2, [pc, #660]	; (8001400 <HAL_RCC_OscConfig+0x680>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e185      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001174:	4ba1      	ldr	r3, [pc, #644]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800117e:	231f      	movs	r3, #31
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d105      	bne.n	8001194 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001188:	4b9c      	ldr	r3, [pc, #624]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800118a:	69da      	ldr	r2, [r3, #28]
 800118c:	4b9b      	ldr	r3, [pc, #620]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800118e:	499d      	ldr	r1, [pc, #628]	; (8001404 <HAL_RCC_OscConfig+0x684>)
 8001190:	400a      	ands	r2, r1
 8001192:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2210      	movs	r2, #16
 800119a:	4013      	ands	r3, r2
 800119c:	d063      	beq.n	8001266 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d12a      	bne.n	80011fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011a6:	4b95      	ldr	r3, [pc, #596]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80011a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011aa:	4b94      	ldr	r3, [pc, #592]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80011ac:	2104      	movs	r1, #4
 80011ae:	430a      	orrs	r2, r1
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011b2:	4b92      	ldr	r3, [pc, #584]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80011b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b6:	4b91      	ldr	r3, [pc, #580]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff fb45 	bl	800084c <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011c8:	f7ff fb40 	bl	800084c <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e152      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011da:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	d0f1      	beq.n	80011c8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011e4:	4b85      	ldr	r3, [pc, #532]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	22f8      	movs	r2, #248	; 0xf8
 80011ea:	4393      	bics	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	00da      	lsls	r2, r3, #3
 80011f4:	4b81      	ldr	r3, [pc, #516]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
 80011fa:	e034      	b.n	8001266 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	3305      	adds	r3, #5
 8001202:	d111      	bne.n	8001228 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001204:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001208:	4b7c      	ldr	r3, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800120a:	2104      	movs	r1, #4
 800120c:	438a      	bics	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001210:	4b7a      	ldr	r3, [pc, #488]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	22f8      	movs	r2, #248	; 0xf8
 8001216:	4393      	bics	r3, r2
 8001218:	0019      	movs	r1, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	00da      	lsls	r2, r3, #3
 8001220:	4b76      	ldr	r3, [pc, #472]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001222:	430a      	orrs	r2, r1
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
 8001226:	e01e      	b.n	8001266 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001228:	4b74      	ldr	r3, [pc, #464]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800122a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122c:	4b73      	ldr	r3, [pc, #460]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800122e:	2104      	movs	r1, #4
 8001230:	430a      	orrs	r2, r1
 8001232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001234:	4b71      	ldr	r3, [pc, #452]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001238:	4b70      	ldr	r3, [pc, #448]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800123a:	2101      	movs	r1, #1
 800123c:	438a      	bics	r2, r1
 800123e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001240:	f7ff fb04 	bl	800084c <HAL_GetTick>
 8001244:	0003      	movs	r3, r0
 8001246:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800124a:	f7ff faff 	bl	800084c <HAL_GetTick>
 800124e:	0002      	movs	r2, r0
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e111      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	2202      	movs	r2, #2
 8001262:	4013      	ands	r3, r2
 8001264:	d1f1      	bne.n	800124a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2220      	movs	r2, #32
 800126c:	4013      	ands	r3, r2
 800126e:	d05c      	beq.n	800132a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001270:	4b62      	ldr	r3, [pc, #392]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	220c      	movs	r2, #12
 8001276:	4013      	ands	r3, r2
 8001278:	2b0c      	cmp	r3, #12
 800127a:	d00e      	beq.n	800129a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800127c:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	220c      	movs	r2, #12
 8001282:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001284:	2b08      	cmp	r3, #8
 8001286:	d114      	bne.n	80012b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001288:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	23c0      	movs	r3, #192	; 0xc0
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	401a      	ands	r2, r3
 8001292:	23c0      	movs	r3, #192	; 0xc0
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	429a      	cmp	r2, r3
 8001298:	d10b      	bne.n	80012b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800129a:	4b58      	ldr	r3, [pc, #352]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800129c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4013      	ands	r3, r2
 80012a4:	d040      	beq.n	8001328 <HAL_RCC_OscConfig+0x5a8>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d03c      	beq.n	8001328 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0e6      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d01b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80012bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012be:	4b4f      	ldr	r3, [pc, #316]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0249      	lsls	r1, r1, #9
 80012c4:	430a      	orrs	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fac0 	bl	800084c <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012d2:	f7ff fabb 	bl	800084c <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e0cd      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012e4:	4b45      	ldr	r3, [pc, #276]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80012e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	025b      	lsls	r3, r3, #9
 80012ec:	4013      	ands	r3, r2
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x552>
 80012f0:	e01b      	b.n	800132a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80012f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80012f8:	4943      	ldr	r1, [pc, #268]	; (8001408 <HAL_RCC_OscConfig+0x688>)
 80012fa:	400a      	ands	r2, r1
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff faa5 	bl	800084c <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001308:	f7ff faa0 	bl	800084c <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e0b2      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800131c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	4013      	ands	r3, r2
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x588>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001328:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x5b4>
 8001332:	e0a4      	b.n	800147e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	220c      	movs	r2, #12
 800133a:	4013      	ands	r3, r2
 800133c:	2b08      	cmp	r3, #8
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x5c2>
 8001340:	e078      	b.n	8001434 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	2b02      	cmp	r3, #2
 8001348:	d14c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001350:	492e      	ldr	r1, [pc, #184]	; (800140c <HAL_RCC_OscConfig+0x68c>)
 8001352:	400a      	ands	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fa79 	bl	800084c <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fa74 	bl	800084c <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e086      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	049b      	lsls	r3, r3, #18
 800137a:	4013      	ands	r3, r2
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001382:	220f      	movs	r2, #15
 8001384:	4393      	bics	r3, r2
 8001386:	0019      	movs	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 800138e:	430a      	orrs	r2, r1
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_RCC_OscConfig+0x690>)
 8001398:	4013      	ands	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	431a      	orrs	r2, r3
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0449      	lsls	r1, r1, #17
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fa47 	bl	800084c <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fa42 	bl	800084c <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e054      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	049b      	lsls	r3, r3, #18
 80013de:	4013      	ands	r3, r2
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x644>
 80013e2:	e04c      	b.n	800147e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <HAL_RCC_OscConfig+0x68c>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fa2c 	bl	800084c <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x6a6>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	40021000 	.word	0x40021000
 8001400:	00001388 	.word	0x00001388
 8001404:	efffffff 	.word	0xefffffff
 8001408:	fffeffff 	.word	0xfffeffff
 800140c:	feffffff 	.word	0xfeffffff
 8001410:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fa1a 	bl	800084c <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e02c      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_RCC_OscConfig+0x708>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	049b      	lsls	r3, r3, #18
 800142e:	4013      	ands	r3, r2
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x694>
 8001432:	e024      	b.n	800147e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e01f      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_RCC_OscConfig+0x708>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_RCC_OscConfig+0x708>)
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	23c0      	movs	r3, #192	; 0xc0
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	401a      	ands	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	429a      	cmp	r2, r3
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	220f      	movs	r2, #15
 8001460:	401a      	ands	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d107      	bne.n	800147a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	23f0      	movs	r3, #240	; 0xf0
 800146e:	039b      	lsls	r3, r3, #14
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001476:	429a      	cmp	r2, r3
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b008      	add	sp, #32
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0bf      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b61      	ldr	r3, [pc, #388]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d911      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4393      	bics	r3, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4013      	ands	r3, r2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0a6      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d015      	beq.n	8001508 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
 80014e4:	d006      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014e6:	4b51      	ldr	r3, [pc, #324]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4b50      	ldr	r3, [pc, #320]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 80014ec:	21e0      	movs	r1, #224	; 0xe0
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b4d      	ldr	r3, [pc, #308]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	22f0      	movs	r2, #240	; 0xf0
 80014fa:	4393      	bics	r3, r2
 80014fc:	0019      	movs	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	d04c      	beq.n	80015ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	029b      	lsls	r3, r3, #10
 8001522:	4013      	ands	r3, r2
 8001524:	d120      	bne.n	8001568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07a      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b3e      	ldr	r3, [pc, #248]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	049b      	lsls	r3, r3, #18
 800153a:	4013      	ands	r3, r2
 800153c:	d114      	bne.n	8001568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06e      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	025b      	lsls	r3, r3, #9
 8001552:	4013      	ands	r3, r2
 8001554:	d108      	bne.n	8001568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e062      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e05b      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff f966 	bl	800084c <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001584:	e009      	b.n	800159a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001586:	f7ff f961 	bl	800084c <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4a27      	ldr	r2, [pc, #156]	; (8001630 <HAL_RCC_ClockConfig+0x1a4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e042      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	220c      	movs	r2, #12
 80015a0:	401a      	ands	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1ec      	bne.n	8001586 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d211      	bcs.n	80015de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_RCC_ClockConfig+0x19c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d001      	beq.n	80015de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e020      	b.n	8001620 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4013      	ands	r3, r2
 80015e6:	d009      	beq.n	80015fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a11      	ldr	r2, [pc, #68]	; (8001634 <HAL_RCC_ClockConfig+0x1a8>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015fc:	f000 f820 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001600:	0001      	movs	r1, r0
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x1a0>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	220f      	movs	r2, #15
 800160a:	4013      	ands	r3, r2
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x1ac>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	000a      	movs	r2, r1
 8001612:	40da      	lsrs	r2, r3
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1b0>)
 8001616:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff f8d1 	bl	80007c0 <HAL_InitTick>
  
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b004      	add	sp, #16
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40022000 	.word	0x40022000
 800162c:	40021000 	.word	0x40021000
 8001630:	00001388 	.word	0x00001388
 8001634:	fffff8ff 	.word	0xfffff8ff
 8001638:	0800213c 	.word	0x0800213c
 800163c:	20000000 	.word	0x20000000

08001640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b08f      	sub	sp, #60	; 0x3c
 8001644:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001646:	2314      	movs	r3, #20
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	4a37      	ldr	r2, [pc, #220]	; (8001728 <HAL_RCC_GetSysClockFreq+0xe8>)
 800164c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800164e:	c313      	stmia	r3!, {r0, r1, r4}
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4a35      	ldr	r2, [pc, #212]	; (800172c <HAL_RCC_GetSysClockFreq+0xec>)
 8001658:	ca13      	ldmia	r2!, {r0, r1, r4}
 800165a:	c313      	stmia	r3!, {r0, r1, r4}
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	220c      	movs	r2, #12
 800167e:	4013      	ands	r3, r2
 8001680:	2b08      	cmp	r3, #8
 8001682:	d006      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x52>
 8001684:	2b0c      	cmp	r3, #12
 8001686:	d043      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0xd0>
 8001688:	2b04      	cmp	r3, #4
 800168a:	d144      	bne.n	8001716 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_RCC_GetSysClockFreq+0xf4>)
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001690:	e044      	b.n	800171c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	0c9b      	lsrs	r3, r3, #18
 8001696:	220f      	movs	r2, #15
 8001698:	4013      	ands	r3, r2
 800169a:	2214      	movs	r2, #20
 800169c:	18ba      	adds	r2, r7, r2
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_RCC_GetSysClockFreq+0xf0>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	220f      	movs	r2, #15
 80016a8:	4013      	ands	r3, r2
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	401a      	ands	r2, r3
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	429a      	cmp	r2, r3
 80016be:	d109      	bne.n	80016d4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c2:	481c      	ldr	r0, [pc, #112]	; (8001734 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016c4:	f7fe fd20 	bl	8000108 <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	4353      	muls	r3, r2
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
 80016d2:	e01a      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80016d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d6:	23c0      	movs	r3, #192	; 0xc0
 80016d8:	025b      	lsls	r3, r3, #9
 80016da:	401a      	ands	r2, r3
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d109      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016e6:	4814      	ldr	r0, [pc, #80]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e8:	f7fe fd0e 	bl	8000108 <__udivsi3>
 80016ec:	0003      	movs	r3, r0
 80016ee:	001a      	movs	r2, r3
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	4353      	muls	r3, r2
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
 80016f6:	e008      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016fc:	f7fe fd04 	bl	8000108 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	001a      	movs	r2, r3
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	4353      	muls	r3, r2
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800170a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800170e:	e005      	b.n	800171c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001714:	e002      	b.n	800171c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800171a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b00f      	add	sp, #60	; 0x3c
 8001724:	bd90      	pop	{r4, r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	0800211c 	.word	0x0800211c
 800172c:	0800212c 	.word	0x0800212c
 8001730:	40021000 	.word	0x40021000
 8001734:	007a1200 	.word	0x007a1200
 8001738:	02dc6c00 	.word	0x02dc6c00

0800173c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001740:	4b02      	ldr	r3, [pc, #8]	; (800174c <HAL_RCC_GetHCLKFreq+0x10>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	20000000 	.word	0x20000000

08001750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001754:	f7ff fff2 	bl	800173c <HAL_RCC_GetHCLKFreq>
 8001758:	0001      	movs	r1, r0
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	2207      	movs	r2, #7
 8001762:	4013      	ands	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	40d9      	lsrs	r1, r3
 800176a:	000b      	movs	r3, r1
}    
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	40021000 	.word	0x40021000
 8001778:	0800214c 	.word	0x0800214c

0800177c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	025b      	lsls	r3, r3, #9
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001798:	e08f      	b.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2317      	movs	r3, #23
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	055b      	lsls	r3, r3, #21
 80017aa:	4013      	ands	r3, r2
 80017ac:	d111      	bne.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	4b6b      	ldr	r3, [pc, #428]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	0549      	lsls	r1, r1, #21
 80017b8:	430a      	orrs	r2, r1
 80017ba:	61da      	str	r2, [r3, #28]
 80017bc:	4b68      	ldr	r3, [pc, #416]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017be:	69da      	ldr	r2, [r3, #28]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	055b      	lsls	r3, r3, #21
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ca:	2317      	movs	r3, #23
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b64      	ldr	r3, [pc, #400]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	d11a      	bne.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b61      	ldr	r3, [pc, #388]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b60      	ldr	r3, [pc, #384]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0049      	lsls	r1, r1, #1
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ec:	f7ff f82e 	bl	800084c <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff f829 	bl	800084c <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0a6      	b.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b56      	ldr	r3, [pc, #344]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4013      	ands	r3, r2
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	23c0      	movs	r3, #192	; 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d034      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	23c0      	movs	r3, #192	; 0xc0
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4013      	ands	r3, r2
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d02c      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a4b      	ldr	r2, [pc, #300]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0249      	lsls	r1, r1, #9
 800184a:	430a      	orrs	r2, r1
 800184c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001850:	6a1a      	ldr	r2, [r3, #32]
 8001852:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001854:	4945      	ldr	r1, [pc, #276]	; (800196c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001856:	400a      	ands	r2, r1
 8001858:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	4013      	ands	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7fe fff0 	bl	800084c <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e009      	b.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7fe ffeb 	bl	800084c <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	4a3c      	ldr	r2, [pc, #240]	; (8001970 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e067      	b.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d0f0      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a34      	ldr	r2, [pc, #208]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001896:	4013      	ands	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018a4:	2317      	movs	r3, #23
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d105      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b4:	492f      	ldr	r1, [pc, #188]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b6:	400a      	ands	r2, r1
 80018b8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	2203      	movs	r2, #3
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d009      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018f2:	430a      	orrs	r2, r1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2220      	movs	r2, #32
 80018fc:	4013      	ands	r3, r2
 80018fe:	d009      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	2210      	movs	r2, #16
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001910:	430a      	orrs	r2, r1
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	029b      	lsls	r3, r3, #10
 800191c:	4013      	ands	r3, r2
 800191e:	d009      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	4393      	bics	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001930:	430a      	orrs	r2, r1
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4013      	ands	r3, r2
 800193e:	d009      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	4393      	bics	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b006      	add	sp, #24
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40021000 	.word	0x40021000
 8001964:	40007000 	.word	0x40007000
 8001968:	fffffcff 	.word	0xfffffcff
 800196c:	fffeffff 	.word	0xfffeffff
 8001970:	00001388 	.word	0x00001388
 8001974:	efffffff 	.word	0xefffffff
 8001978:	fffcffff 	.word	0xfffcffff

0800197c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e044      	b.n	8001a18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2270      	movs	r2, #112	; 0x70
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7fe fe57 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2224      	movs	r2, #36	; 0x24
 80019aa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2101      	movs	r1, #1
 80019b8:	438a      	bics	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 f830 	bl	8001a24 <UART_SetConfig>
 80019c4:	0003      	movs	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e024      	b.n	8001a18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 f9ef 	bl	8001dbc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	490d      	ldr	r1, [pc, #52]	; (8001a20 <HAL_UART_Init+0xa4>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	212a      	movs	r1, #42	; 0x2a
 80019fa:	438a      	bics	r2, r1
 80019fc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 fa87 	bl	8001f24 <UART_CheckIdleState>
 8001a16:	0003      	movs	r3, r0
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	ffffb7ff 	.word	0xffffb7ff

08001a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a30:	2317      	movs	r3, #23
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4ac5      	ldr	r2, [pc, #788]	; (8001d6c <UART_SetConfig+0x348>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4ac0      	ldr	r2, [pc, #768]	; (8001d70 <UART_SetConfig+0x34c>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4ab7      	ldr	r2, [pc, #732]	; (8001d74 <UART_SetConfig+0x350>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4ab3      	ldr	r2, [pc, #716]	; (8001d78 <UART_SetConfig+0x354>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d125      	bne.n	8001afa <UART_SetConfig+0xd6>
 8001aae:	4bb3      	ldr	r3, [pc, #716]	; (8001d7c <UART_SetConfig+0x358>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d00f      	beq.n	8001ada <UART_SetConfig+0xb6>
 8001aba:	d304      	bcc.n	8001ac6 <UART_SetConfig+0xa2>
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d011      	beq.n	8001ae4 <UART_SetConfig+0xc0>
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d005      	beq.n	8001ad0 <UART_SetConfig+0xac>
 8001ac4:	e013      	b.n	8001aee <UART_SetConfig+0xca>
 8001ac6:	231f      	movs	r3, #31
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e064      	b.n	8001b9a <UART_SetConfig+0x176>
 8001ad0:	231f      	movs	r3, #31
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e05f      	b.n	8001b9a <UART_SetConfig+0x176>
 8001ada:	231f      	movs	r3, #31
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2204      	movs	r2, #4
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e05a      	b.n	8001b9a <UART_SetConfig+0x176>
 8001ae4:	231f      	movs	r3, #31
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	2208      	movs	r2, #8
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e055      	b.n	8001b9a <UART_SetConfig+0x176>
 8001aee:	231f      	movs	r3, #31
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	2210      	movs	r2, #16
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	e04f      	b.n	8001b9a <UART_SetConfig+0x176>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4aa0      	ldr	r2, [pc, #640]	; (8001d80 <UART_SetConfig+0x35c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d132      	bne.n	8001b6a <UART_SetConfig+0x146>
 8001b04:	4b9d      	ldr	r3, [pc, #628]	; (8001d7c <UART_SetConfig+0x358>)
 8001b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b08:	23c0      	movs	r3, #192	; 0xc0
 8001b0a:	029b      	lsls	r3, r3, #10
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	0252      	lsls	r2, r2, #9
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <UART_SetConfig+0x126>
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	0252      	lsls	r2, r2, #9
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d802      	bhi.n	8001b24 <UART_SetConfig+0x100>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <UART_SetConfig+0x112>
 8001b22:	e01c      	b.n	8001b5e <UART_SetConfig+0x13a>
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	0292      	lsls	r2, r2, #10
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <UART_SetConfig+0x130>
 8001b2c:	22c0      	movs	r2, #192	; 0xc0
 8001b2e:	0292      	lsls	r2, r2, #10
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d005      	beq.n	8001b40 <UART_SetConfig+0x11c>
 8001b34:	e013      	b.n	8001b5e <UART_SetConfig+0x13a>
 8001b36:	231f      	movs	r3, #31
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e02c      	b.n	8001b9a <UART_SetConfig+0x176>
 8001b40:	231f      	movs	r3, #31
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e027      	b.n	8001b9a <UART_SetConfig+0x176>
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2204      	movs	r2, #4
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e022      	b.n	8001b9a <UART_SetConfig+0x176>
 8001b54:	231f      	movs	r3, #31
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	2208      	movs	r2, #8
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e01d      	b.n	8001b9a <UART_SetConfig+0x176>
 8001b5e:	231f      	movs	r3, #31
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2210      	movs	r2, #16
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	e017      	b.n	8001b9a <UART_SetConfig+0x176>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a85      	ldr	r2, [pc, #532]	; (8001d84 <UART_SetConfig+0x360>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d104      	bne.n	8001b7e <UART_SetConfig+0x15a>
 8001b74:	231f      	movs	r3, #31
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	e00d      	b.n	8001b9a <UART_SetConfig+0x176>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a81      	ldr	r2, [pc, #516]	; (8001d88 <UART_SetConfig+0x364>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d104      	bne.n	8001b92 <UART_SetConfig+0x16e>
 8001b88:	231f      	movs	r3, #31
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e003      	b.n	8001b9a <UART_SetConfig+0x176>
 8001b92:	231f      	movs	r3, #31
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2210      	movs	r2, #16
 8001b98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d000      	beq.n	8001ba8 <UART_SetConfig+0x184>
 8001ba6:	e07d      	b.n	8001ca4 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8001ba8:	231f      	movs	r3, #31
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d01c      	beq.n	8001bec <UART_SetConfig+0x1c8>
 8001bb2:	dc02      	bgt.n	8001bba <UART_SetConfig+0x196>
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <UART_SetConfig+0x1a0>
 8001bb8:	e04b      	b.n	8001c52 <UART_SetConfig+0x22e>
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d025      	beq.n	8001c0a <UART_SetConfig+0x1e6>
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d037      	beq.n	8001c32 <UART_SetConfig+0x20e>
 8001bc2:	e046      	b.n	8001c52 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001bc4:	f7ff fdc4 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	005a      	lsls	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	18d2      	adds	r2, r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	0019      	movs	r1, r3
 8001bde:	0010      	movs	r0, r2
 8001be0:	f7fe fa92 	bl	8000108 <__udivsi3>
 8001be4:	0003      	movs	r3, r0
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	61bb      	str	r3, [r7, #24]
        break;
 8001bea:	e037      	b.n	8001c5c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	4a66      	ldr	r2, [pc, #408]	; (8001d8c <UART_SetConfig+0x368>)
 8001bf4:	189a      	adds	r2, r3, r2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f7fe fa83 	bl	8000108 <__udivsi3>
 8001c02:	0003      	movs	r3, r0
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	61bb      	str	r3, [r7, #24]
        break;
 8001c08:	e028      	b.n	8001c5c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c0a:	f7ff fd19 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	18d2      	adds	r2, r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	0019      	movs	r1, r3
 8001c24:	0010      	movs	r0, r2
 8001c26:	f7fe fa6f 	bl	8000108 <__udivsi3>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	61bb      	str	r3, [r7, #24]
        break;
 8001c30:	e014      	b.n	8001c5c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0252      	lsls	r2, r2, #9
 8001c3c:	189a      	adds	r2, r3, r2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0019      	movs	r1, r3
 8001c44:	0010      	movs	r0, r2
 8001c46:	f7fe fa5f 	bl	8000108 <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	61bb      	str	r3, [r7, #24]
        break;
 8001c50:	e004      	b.n	8001c5c <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8001c52:	2317      	movs	r3, #23
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
        break;
 8001c5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	d91b      	bls.n	8001c9a <UART_SetConfig+0x276>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <UART_SetConfig+0x36c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d817      	bhi.n	8001c9a <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	200a      	movs	r0, #10
 8001c70:	183b      	adds	r3, r7, r0
 8001c72:	210f      	movs	r1, #15
 8001c74:	438a      	bics	r2, r1
 8001c76:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2207      	movs	r2, #7
 8001c80:	4013      	ands	r3, r2
 8001c82:	b299      	uxth	r1, r3
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	183a      	adds	r2, r7, r0
 8001c88:	8812      	ldrh	r2, [r2, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	183a      	adds	r2, r7, r0
 8001c94:	8812      	ldrh	r2, [r2, #0]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	e082      	b.n	8001da0 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8001c9a:	2317      	movs	r3, #23
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e07d      	b.n	8001da0 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8001ca4:	231f      	movs	r3, #31
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d01b      	beq.n	8001ce6 <UART_SetConfig+0x2c2>
 8001cae:	dc02      	bgt.n	8001cb6 <UART_SetConfig+0x292>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <UART_SetConfig+0x29c>
 8001cb4:	e049      	b.n	8001d4a <UART_SetConfig+0x326>
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d024      	beq.n	8001d04 <UART_SetConfig+0x2e0>
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d035      	beq.n	8001d2a <UART_SetConfig+0x306>
 8001cbe:	e044      	b.n	8001d4a <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cc0:	f7ff fd46 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	085a      	lsrs	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	18d2      	adds	r2, r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	0010      	movs	r0, r2
 8001cda:	f7fe fa15 	bl	8000108 <__udivsi3>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	61bb      	str	r3, [r7, #24]
        break;
 8001ce4:	e036      	b.n	8001d54 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <UART_SetConfig+0x370>)
 8001cee:	189a      	adds	r2, r3, r2
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	0010      	movs	r0, r2
 8001cf8:	f7fe fa06 	bl	8000108 <__udivsi3>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	61bb      	str	r3, [r7, #24]
        break;
 8001d02:	e027      	b.n	8001d54 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d04:	f7ff fc9c 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	085a      	lsrs	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	18d2      	adds	r2, r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	f7fe f9f3 	bl	8000108 <__udivsi3>
 8001d22:	0003      	movs	r3, r0
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	61bb      	str	r3, [r7, #24]
        break;
 8001d28:	e014      	b.n	8001d54 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	0212      	lsls	r2, r2, #8
 8001d34:	189a      	adds	r2, r3, r2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	0010      	movs	r0, r2
 8001d3e:	f7fe f9e3 	bl	8000108 <__udivsi3>
 8001d42:	0003      	movs	r3, r0
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	61bb      	str	r3, [r7, #24]
        break;
 8001d48:	e004      	b.n	8001d54 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8001d4a:	2317      	movs	r3, #23
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
        break;
 8001d52:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	d91e      	bls.n	8001d98 <UART_SetConfig+0x374>
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <UART_SetConfig+0x36c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d81a      	bhi.n	8001d98 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e019      	b.n	8001da0 <UART_SetConfig+0x37c>
 8001d6c:	efff69f3 	.word	0xefff69f3
 8001d70:	ffffcfff 	.word	0xffffcfff
 8001d74:	fffff4ff 	.word	0xfffff4ff
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40004400 	.word	0x40004400
 8001d84:	40004800 	.word	0x40004800
 8001d88:	40004c00 	.word	0x40004c00
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	0000ffff 	.word	0x0000ffff
 8001d94:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8001d98:	2317      	movs	r3, #23
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001dac:	2317      	movs	r3, #23
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b008      	add	sp, #32
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)

08001dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d00b      	beq.n	8001de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <UART_AdvFeatureConfig+0x144>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d00b      	beq.n	8001e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a43      	ldr	r2, [pc, #268]	; (8001f04 <UART_AdvFeatureConfig+0x148>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d00b      	beq.n	8001e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <UART_AdvFeatureConfig+0x14c>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	2208      	movs	r2, #8
 8001e30:	4013      	ands	r3, r2
 8001e32:	d00b      	beq.n	8001e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a34      	ldr	r2, [pc, #208]	; (8001f0c <UART_AdvFeatureConfig+0x150>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2210      	movs	r2, #16
 8001e52:	4013      	ands	r3, r2
 8001e54:	d00b      	beq.n	8001e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <UART_AdvFeatureConfig+0x154>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2220      	movs	r2, #32
 8001e74:	4013      	ands	r3, r2
 8001e76:	d00b      	beq.n	8001e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <UART_AdvFeatureConfig+0x158>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	4013      	ands	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <UART_AdvFeatureConfig+0x15c>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	035b      	lsls	r3, r3, #13
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d10b      	bne.n	8001ed6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <UART_AdvFeatureConfig+0x160>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	4013      	ands	r3, r2
 8001ede:	d00b      	beq.n	8001ef8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <UART_AdvFeatureConfig+0x164>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]
  }
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b002      	add	sp, #8
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	fffdffff 	.word	0xfffdffff
 8001f04:	fffeffff 	.word	0xfffeffff
 8001f08:	fffbffff 	.word	0xfffbffff
 8001f0c:	ffff7fff 	.word	0xffff7fff
 8001f10:	ffffefff 	.word	0xffffefff
 8001f14:	ffffdfff 	.word	0xffffdfff
 8001f18:	ffefffff 	.word	0xffefffff
 8001f1c:	ff9fffff 	.word	0xff9fffff
 8001f20:	fff7ffff 	.word	0xfff7ffff

08001f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001f32:	f7fe fc8b 	bl	800084c <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2208      	movs	r2, #8
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d10d      	bne.n	8001f64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	0399      	lsls	r1, r3, #14
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <UART_CheckIdleState+0x88>)
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	0013      	movs	r3, r2
 8001f56:	2200      	movs	r2, #0
 8001f58:	f000 f82a 	bl	8001fb0 <UART_WaitOnFlagUntilTimeout>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e01f      	b.n	8001fa4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d10d      	bne.n	8001f8e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	03d9      	lsls	r1, r3, #15
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <UART_CheckIdleState+0x88>)
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	0013      	movs	r3, r2
 8001f80:	2200      	movs	r2, #0
 8001f82:	f000 f815 	bl	8001fb0 <UART_WaitOnFlagUntilTimeout>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d001      	beq.n	8001f8e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e00a      	b.n	8001fa4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2270      	movs	r2, #112	; 0x70
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	01ffffff 	.word	0x01ffffff

08001fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc0:	e05d      	b.n	800207e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	d05a      	beq.n	800207e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	f7fe fc40 	bl	800084c <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <UART_WaitOnFlagUntilTimeout+0x2e>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11b      	bne.n	8002016 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	492f      	ldr	r1, [pc, #188]	; (80020a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	438a      	bics	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2270      	movs	r2, #112	; 0x70
 800200e:	2100      	movs	r1, #0
 8002010:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e043      	b.n	800209e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2204      	movs	r2, #4
 800201e:	4013      	ands	r3, r2
 8002020:	d02d      	beq.n	800207e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	401a      	ands	r2, r3
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	429a      	cmp	r2, r3
 8002034:	d123      	bne.n	800207e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4917      	ldr	r1, [pc, #92]	; (80020a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800204c:	400a      	ands	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2101      	movs	r1, #1
 800205c:	438a      	bics	r2, r1
 800205e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2270      	movs	r2, #112	; 0x70
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e00f      	b.n	800209e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	425a      	negs	r2, r3
 800208e:	4153      	adcs	r3, r2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	001a      	movs	r2, r3
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d092      	beq.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	fffffe5f 	.word	0xfffffe5f

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	2600      	movs	r6, #0
 80020b0:	4d0c      	ldr	r5, [pc, #48]	; (80020e4 <__libc_init_array+0x38>)
 80020b2:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b4:	1b64      	subs	r4, r4, r5
 80020b6:	10a4      	asrs	r4, r4, #2
 80020b8:	42a6      	cmp	r6, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	2600      	movs	r6, #0
 80020be:	f000 f821 	bl	8002104 <_init>
 80020c2:	4d0a      	ldr	r5, [pc, #40]	; (80020ec <__libc_init_array+0x40>)
 80020c4:	4c0a      	ldr	r4, [pc, #40]	; (80020f0 <__libc_init_array+0x44>)
 80020c6:	1b64      	subs	r4, r4, r5
 80020c8:	10a4      	asrs	r4, r4, #2
 80020ca:	42a6      	cmp	r6, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	00b3      	lsls	r3, r6, #2
 80020d2:	58eb      	ldr	r3, [r5, r3]
 80020d4:	4798      	blx	r3
 80020d6:	3601      	adds	r6, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	00b3      	lsls	r3, r6, #2
 80020dc:	58eb      	ldr	r3, [r5, r3]
 80020de:	4798      	blx	r3
 80020e0:	3601      	adds	r6, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	08002154 	.word	0x08002154
 80020e8:	08002154 	.word	0x08002154
 80020ec:	08002154 	.word	0x08002154
 80020f0:	08002158 	.word	0x08002158

080020f4 <memset>:
 80020f4:	0003      	movs	r3, r0
 80020f6:	1812      	adds	r2, r2, r0
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d100      	bne.n	80020fe <memset+0xa>
 80020fc:	4770      	bx	lr
 80020fe:	7019      	strb	r1, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	e7f9      	b.n	80020f8 <memset+0x4>

08002104 <_init>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr

08002110 <_fini>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002116:	bc08      	pop	{r3}
 8002118:	469e      	mov	lr, r3
 800211a:	4770      	bx	lr
